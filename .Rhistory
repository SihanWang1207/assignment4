D1 <- read.csv('Assistments-confidence.csv')
View(D1)
library(corrplot)
#You can install the corrplot package to plot some pretty correlation matrices (sometimes called correlograms)
install.packages("corrplot")
library(corrplot)
library(tidyr)
library(dplyr)
#We won't need the id variable, so remove that.
D1 = D1[,-1]
#Generate pairwise correlations
COR <- cor(D1)
corrplot(COR, order="AOE", method="circle", tl.pos="lt", type="upper",
tl.col="black", tl.cex=0.6, tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
sig.level=0.50, insig = "blank")
D2 <- D1[, -4]
#The, scale and center your data for easier interpretation
D2 <- scale(D2, center = TRUE)
pca <- prcomp(D2, scale = TRUE)
pca$sdev
pca$sdev^2
summary(pca)
plot(pca, type = "lines")
D3 <- as.data.frame(pca$x)
D4 <- cbind(D3, as.data.frame(D1$mean_correct))
COR2 <- cor(D4)
pca$rotation
loadings <- abs(pca$rotation) #abs() will make all eigenvectors positive
sweep(loadings, 2, colSums(loadings), "/") #sweep() computes each row as a proportion of the column. (There must be a way to do this with dplyr()?)
biplot(pca)
D1 = read.csv('humor_data.csv')
D1 <- read.csv('Assistments-confidence.csv')
F1 = read.csv('humor_data.csv')
View(F1)
COR3 = cor(F1)
corrplot(COR3, order="AOE", method="circle", tl.pos="lt", type="upper",
tl.col="black", tl.cex=0.6, tl.srt=45,
addCoef.col="black", addCoefasPercent = TRUE,
sig.level=0.50, insig = "blank")
F2 = scale(F1, center = TRUE)
pca2 = prcomp(F2, scale = TRUE)
pca$sdev^2
pca3$sdev
pca2$sdev
pca2$sdev^2
#A summary of our pca will give us the proportion of variance accounted for by each component
summary(pca2)
#We can look at this to get an idea of which components we should keep and which we should drop
plot(pca2, type = "lines")
